name: "Terraform"

description: "Apply Terraform Configuration"

inputs:
  terraform-version:
    description: "The version of Terraform to use"
    required: false
    default: "latest"
  init-args:
    description: "The arguments to pass to terraform init"
    required: false
    default: "-no-color"
  validate-args:
    description: "The arguments to pass to terraform validate"
    required: false
    default: "-no-color"
  fmt-args:
    description: "The arguments to pass to terraform fmt"
    required: false
    default: "-check -no-color"
  plan-args:
    description: "The arguments to pass to terraform plan"
    required: false
    default: "-no-color"
  apply-args:
    description: "The arguments to pass to terraform apply"
    required: false
    default: "-no-color"
  destroy-args:
    description: "The arguments to pass to terraform destroy"
    required: false
    default: "-no-color"
  directory:
    description: "The directory where the Terraform configuration files are located"
    required: false
    default: "."
  validate:
    description: "Whether to validate"
    required: false
    default: "true"
  plan:
    description: "Whether to plan"
    required: false
    default: "true"
  apply:
    description: "WHether to apply"
    required: false
    default: "false"
  destroy:
    description: "Whether to destroy"
    required: false
    default: "false"

runs:
  using: "composite"
  steps:
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ inputs.terraform-version }}
    - name: Terraform fmt
      run: terraform fmt ${{ inputs.fmt-args }}
      working-directory: ${{ inputs.directory }}
      shell: bash
    - name: Terraform Init
      run: terraform init ${{ inputs.init-args }}}
      working-directory: ${{ inputs.directory }}
      shell: bash
    - name: Terraform Validate
      if: ${{ inputs.validate == true }}
      run: terraform validate ${{ inputs.validate-args }}}
      working-directory: ${{ inputs.directory }}
      shell: bash
    - name: Terraform Plan
      if: ${{ inputs.plan == true }}
      run: terraform plan ${{ inputs.plan-args }}
      working-directory: ${{ inputs.directory }}
      shell: bash
    - name: Terraform Apply
      if: ${{ inputs.apply == true }}
      run: terraform apply -auto-approve ${{ inputs.apply-args }}
      working-directory: ${{ inputs.directory }}
      shell: bash
    - name: Terraform Destroy
      if: ${{ inputs.destroy == true }}
      run: terraform destroy -auto-approve ${{ inputs.destroy-args }}
      shell: bash

name: Test & Release

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

permissions:
  contents: write
  id-token: write

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        directory:
          - "."
          - "bootstrap"
          - "examples/full"
          - "test/create-application"
          - "test/create-resource"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Lint Example
        uses: "infinite-automations/tflint-all-in-one@v1.0.0"
        with:
          directory: ${{ matrix.directory }}

  update-docs:
    name: Update Docs
    needs:
      - lint
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.ref }}-docs
      cancel-in-progress: false
    outputs:
      changed: ${{ steps.terraform-docs.outputs.num_changed > 0 }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        if: ${{ github.event_name == 'push' }}
      - name: Checkout
        uses: actions/checkout@v4
        if: ${{ github.event_name == 'pull_request' }}
        with:
          ref: ${{ github.event.pull_request.head.ref }}
      - name: Render terraform docs inside the README.md
        id: terraform-docs
        uses: terraform-docs/gh-actions@v1.3.0
        with:
          working-dir: .,bootstrap,examples/full,test/create-application,test/create-resource
          output-file: README.md
          output-method: inject
          git-push: ${{ github.event_name == 'pull_request' }}
          git-commit-message: "docs(terraform): update README.md"
      - name: Cache Docs
        if: ${{ github.event_name == 'push' }}
        uses: actions/cache@v4
        with:
          path: |
            README.md
            bootstrap/README.md
            examples/full/README.md
            test/create-application/README.md
            test/create-resource/README.md
          key: ${{ runner.os }}-docs-${{ github.sha }}

  test:
    name: Test
    needs:
      - lint
      - update-docs
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.ref }}-test
      cancel-in-progress: true
    environment:
      name: ${{ github.event_name == 'pull_request' && 'pr' || 'main' }}
    env:
      ARM_USE_OIDC: true
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Get Branch Slug
        uses: gacts/github-slug@v1
        id: slug
      - name: Create Azure Application For OIDC
        uses: infinite-automations/terraform-all-in-one@v1.2.0
        id: apply-example
        with:
          init-args: >-
            -backend-config='resource_group_name=${{ vars.BACKEND_RESOURCE_GROUP }}'
            -backend-config='storage_account_name=${{ vars.BACKEND_STORAGE_ACCOUNT }}'
            -backend-config='container_name=${{ vars.BACKEND_CONTAINER_NAME }}'
            -backend-config='key=terraform-azuread-github-oidc/test/create-application/${{ steps.slug.outputs.branch-name-slug }}.tfstate'
          directory: "test/create-application"
          apply: true
          destroy: false
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          TF_VAR_azure_application_name: "terraform-azuread-github-oidc-${{ steps.slug.outputs.branch-name-slug }}-test"
      - name: Get Client ID
        id: client-id
        run: |
          echo client-id="$(echo ${{ steps.apply-example.outputs.output-json }} | jq -r '.client_id.value')" >> "$GITHUB_OUTPUT"
      - name: Test Azure Application For OIDC
        uses: infinite-automations/terraform-all-in-one@v1.2.0
        with:
          init-args: >-
            -backend-config='resource_group_name=${{ vars.BACKEND_RESOURCE_GROUP }}'
            -backend-config='storage_account_name=${{ vars.BACKEND_STORAGE_ACCOUNT }}'
            -backend-config='container_name=${{ vars.BACKEND_CONTAINER_NAME }}'
            -backend-config='key=terraform-azuread-github-oidc/test/create-resource/${{ steps.slug.outputs.branch-name-slug }}.tfstate'
          directory: "test/create-resource"
          apply: true
          destroy: true
        env:
          ARM_CLIENT_ID: ${{ steps.client-id.outputs.client-id }}
          TF_VAR_resource_group_name: "rg-${{ steps.slug.outputs.branch-name-slug }}-test"
      - name: Destroy Azure Application For OIDC
        uses: infinite-automations/terraform-all-in-one@v1.2.0
        with:
          directory: "test/create-application"
          setup: false
          init: false
          format: false
          validate: false
          plan: false
          apply: false
          destroy: true
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          TF_VAR_azure_application_name: "terraform-azuread-github-oidc-${{ steps.slug.outputs.branch-name-slug }}-test"

  release:
    name: Release
    needs:
      - update-docs
      - test
    concurrency:
      group: ${{ github.ref }}-release
      cancel-in-progress: false
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Restore Cached Docs
        if: ${{ github.event_name == 'push' }}
        uses: actions/cache@v4
        with:
          path: README.md
          key: ${{ runner.os }}-docs-${{ github.sha }}
      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v4
        with:
          dry_run: ${{ github.event_name == 'pull_request' }}
          ci: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
